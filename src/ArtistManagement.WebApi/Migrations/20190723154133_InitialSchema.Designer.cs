// <auto-generated />
using System;
using ArtistManagement.WebApi.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtistManagement.WebApi.Migrations
{
    [DbContext(typeof(ArtistDbContext))]
    [Migration("20190723154133_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("ArtistManagement.WebApi.Domain.Entities.AlbumEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("Release");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("ArtistManagement.WebApi.Domain.Entities.AlbumTrackEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14);

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("TrackId");

                    b.ToTable("AlbumTracks");
                });

            modelBuilder.Entity("ArtistManagement.WebApi.Domain.Entities.ArtistEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("ArtistManagement.WebApi.Domain.Entities.TrackEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14);

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("ArtistManagement.WebApi.Domain.Entities.AlbumTrackEntity", b =>
                {
                    b.HasOne("ArtistManagement.WebApi.Domain.Entities.AlbumEntity", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ArtistManagement.WebApi.Domain.Entities.TrackEntity", "Track")
                        .WithMany("AlbumTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ArtistManagement.WebApi.Domain.Entities.TrackEntity", b =>
                {
                    b.HasOne("ArtistManagement.WebApi.Domain.Entities.ArtistEntity", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
